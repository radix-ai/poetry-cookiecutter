stages:
  - build
  - test
  - {% if cookiecutter.with_fastapi_api|int or cookiecutter.with_streamlit_app|int %}deploy{% else %}publish{% endif %}

Compute Image Hash:
  stage: build
  script:
    - export DOCKER_IMAGE_SHA="$(sha1sum Dockerfile poetry.lock pyproject.toml | sha1sum | cut -c 1-12)"
    - echo "CI_IMAGE_SHA=$DOCKER_IMAGE_SHA" >> .env
  artifacts:
    reports:
      dotenv: .env

# Base Docker build script.
.docker:
  image: docker:stable
  services:
    - docker:stable-dind
  variables:
    DOCKER_REGISTRY: $CI_REGISTRY
    DOCKER_REGISTRY_USER: $CI_REGISTRY_USER
    DOCKER_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD
  script:
    - |
      echo "$DOCKER_REGISTRY_PASSWORD" | docker login --username "$DOCKER_REGISTRY_USER" --password-stdin "$DOCKER_REGISTRY"
      DOCKER_PUSH=${DOCKER_PUSH:-$(timeout 2s docker pull "$DOCKER_IMAGE":"$DOCKER_IMAGE_SHA" >/dev/null 2>&1 && echo $? || echo $?)}
      if [ "$DOCKER_PUSH" -ne 1 ]; then
        echo "$DOCKER_IMAGE:$DOCKER_IMAGE_SHA exists, skipping this job..."
      else
        # Compile a list of image tags consisting of a hash of its contents, the latest tag if this
        # pipeline is running for the default branch, and the Git tag if this commit is tagged.
        DOCKER_TAGS="$DOCKER_IMAGE_SHA"
        if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then DOCKER_TAGS="$DOCKER_TAGS latest"; fi
        if [ -n "$CI_COMMIT_TAG" ]; then DOCKER_TAGS="$DOCKER_TAGS $CI_COMMIT_TAG"; fi
        if [ -n "$CI_ENVIRONMENT_NAME" ]; then DOCKER_TAGS="$DOCKER_TAGS $CI_ENVIRONMENT_NAME"; fi
        DOCKER_TAGS_JOINED=""
        for DOCKER_TAG in $DOCKER_TAGS; do
          DOCKER_TAGS_JOINED="$DOCKER_TAGS_JOINED --tag $DOCKER_IMAGE:$DOCKER_TAG"
        done

        # Build the Docker image with all of the selected tags.
        {%- if cookiecutter.private_package_repository_name %}
        echo "[http-basic.{{ cookiecutter.private_package_repository_name|slugify }}]" >> auth.toml
        echo "username = \"gitlab-ci-token\"" >> auth.toml
        echo "password = \"$CI_JOB_TOKEN\"" >> auth.toml
        {%- endif %}
        DOCKER_BUILDKIT=1 docker build \
          --cache-from "$CI_REGISTRY_IMAGE/ci:$CI_IMAGE_SHA" \
          --build-arg SOURCE_BRANCH="$CI_COMMIT_REF_NAME" \
          --build-arg SOURCE_COMMIT="$CI_COMMIT_SHA" \
          --build-arg SOURCE_TIMESTAMP="$CI_COMMIT_TIMESTAMP" \
          {%- if cookiecutter.private_package_repository_name %}
          --secret id=poetry_auth,src=auth.toml \
          {%- endif %}
          --target "$DOCKER_TARGET" \
          --pull \
          $DOCKER_TAGS_JOINED \
          .

        # Push all the tagged images.
        for DOCKER_TAG in $DOCKER_TAGS; do
          docker push "$DOCKER_IMAGE:$DOCKER_TAG"
        done
      fi
  rules:
    - changes:
        - Dockerfile
        - poetry.lock
        - pyproject.toml

# Build CI Docker image.
Build CI:
  extends:
    - .docker
  stage: build
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/ci
    DOCKER_TARGET: ci
  artifacts:
    reports:
      dotenv: .env

# Lint and test the package.
Test:
  stage: test
  image: $CI_REGISTRY_IMAGE/ci:$CI_IMAGE_SHA
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .mypy_cache/
      - .pytest_cache/
  script:
    {%- if cookiecutter.private_package_repository_name %}
    - poetry config http-basic.{{ cookiecutter.private_package_repository_name|slugify }} "gitlab-ci-token" "$CI_JOB_TOKEN"
    {%- endif %}
    - poe lint
    - poe test
  coverage: '/^TOTAL.*\s+(\d+(?:\.\d+)?)%/'
  artifacts:
    reports:
      coverage_report: 
        coverage_format: cobertura
        path: reports/coverage.xml
      junit:
        - reports/mypy.xml
        - reports/pytest.xml
    untracked: true
    when: always

{% if not cookiecutter.with_fastapi_api|int and not cookiecutter.with_streamlit_app|int -%}
# Publish this package version to a (private) package repository.
Publish:
  stage: publish
  image: $CI_REGISTRY_IMAGE/ci:$CI_IMAGE_SHA
  script:
    {%- if cookiecutter.private_package_repository_name %}
    - poetry config repositories.private "{{ cookiecutter.private_package_repository_url.replace('simple/', '').replace('simple', '') }}"
    - poetry config http-basic.private "gitlab-ci-token" "$CI_JOB_TOKEN"
    - poetry publish --build --repository private
    {%- else %}
    - poetry config pypi-token.pypi "$POETRY_PYPI_TOKEN_PYPI"
    - poetry publish --build
    {%- endif %}
  only:
    - tags
{%- else -%}
# Build the application as a Docker image and push it to the GitLab registry.
.deploy:
  extends:
    - .docker
  stage: deploy
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE
    DOCKER_IMAGE_SHA: ${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
    DOCKER_PUSH: 1
    DOCKER_TARGET: app
  when: manual
{% for environment in ["feature", "development", "test", "acceptance", "production"] %}
Deploy ({{ environment }}):
  extends:
    - .deploy
  environment: {{ environment }}
  {%- if environment in ["acceptance", "production"] %}
  only:
    - tags
  {%- endif %}
{% endfor %}
{%- endif %}