# https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# https://python-poetry.org/docs/pyproject/
[tool.poetry]
name = "{{ cookiecutter.__package_name_kebab_case }}"
version = "0.0.0"
description = "{{ cookiecutter.package_description }}"
authors = ["{{ cookiecutter.author_name }} <{{ cookiecutter.author_email }}>"]
readme = "README.md"
repository = "{{ cookiecutter.package_url }}"

# https://commitizen-tools.github.io/commitizen/config/
[tool.commitizen]
bump_message = "bump(release): v$current_version â†’ v$new_version"
tag_format = "v$version"
update_changelog_on_bump = true
version = "0.0.0"
version_files = ["pyproject.toml:version"]
{%- if cookiecutter.with_typer_cli|int %}

# https://python-poetry.org/docs/pyproject/#scripts
[tool.poetry.scripts]
{{ cookiecutter.__package_name_kebab_case }} = "{{ cookiecutter.__package_name_snake_case }}.cli:app"
{%- endif %}

# https://python-poetry.org/docs/dependency-specification/
[tool.poetry.dependencies]
{%- if cookiecutter.with_fastapi_api|int %}
coloredlogs = "^15.0.1"
fastapi = "^0.78.0"
gunicorn = "^20.1.0"
{%- endif %}
{%- if cookiecutter.with_fastapi_api|int or cookiecutter.with_streamlit_app|int %}
poethepoet = "^0.16.0"
{%- endif %}
{%- if cookiecutter.with_pydantic_typing|int %}
pydantic = "^1.9.1"
{%- endif %}
python = "^{{ cookiecutter.python_version }}"
{%- if cookiecutter.with_sentry_logging|int %}
sentry-sdk = "^1.6.0"
{%- endif %}
{%- if cookiecutter.with_streamlit_app|int %}
streamlit = "^1.10.0"
{%- endif %}
{%- if cookiecutter.with_typer_cli|int %}
typer = { extras = ["all"], version = "^0.6.1" }
{%- endif %}
{%- if cookiecutter.with_fastapi_api|int %}
uvicorn = { extras = ["standard"], version = "^0.18.2" }
{%- endif %}

# https://python-poetry.org/docs/master/managing-dependencies/
# TODO: Split in `tool.poetry.group.dev` and `tool.poetry.group.test` when Poetry 1.2.0 is released.
[tool.poetry.dev-dependencies]
absolufy-imports = "^0.3.1"
bandit = { extras = ["toml"], version = "^1.7.4" }
black = "^22.6.0"
commitizen = "^2.27.1"
coverage = { extras = ["toml"], version = "^6.4.1" }
cruft = "^2.11.0"
darglint = "^1.8.1"
flake8 = "^5.0.4"
flake8-bugbear = "^22.6.22"
flake8-comprehensions = "^3.10.0"
flake8-mutable = "^1.2.0"
flake8-print = "^5.0.0"
flake8-pytest-style = "^1.6.0"
flake8-rst-docstrings = "^0.2.6"
flake8-tidy-imports = "^4.8.0"
isort = "^5.10.1"
{%- if cookiecutter.with_jupyter_lab|int %}
jupyterlab = "^3.4.3"
{%- endif %}
mypy = "^0.961"
pdoc = "^12.0.2"
pep8-naming = "^0.13.0"
{%- if not cookiecutter.with_fastapi_api|int and not cookiecutter.with_streamlit_app|int %}
poethepoet = "^0.16.0"
{%- endif %}
pre-commit = "^2.19.0"
pydocstyle = { extras = ["toml"], version = "^6.1.1" }
pytest = "^7.1.2"
pytest-clarity = "^1.0.1"
pytest-mock = "^3.8.1"
pytest-xdist = "^2.5.0"
pyupgrade = "^2.34.0"
safety = "^2.1.1"
shellcheck-py = "^0.8.0"
typeguard = "^2.13.3"
yesqa = "^1.4.0"
{%- if cookiecutter.private_package_repository_name %}

# https://python-poetry.org/docs/repositories/#using-a-private-repository
[[tool.poetry.source]]
name = "{{ cookiecutter.private_package_repository_name|slugify }}"
url = "{{ cookiecutter.private_package_repository_url }}"
{%- endif %}

# https://bandit.readthedocs.io/en/latest/config.html
[tool.bandit]
skips = ["B101"]

# https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
[tool.black]
line-length = 100

# https://coverage.readthedocs.io/en/latest/config.html#report
[tool.coverage.report]
fail_under = 50
precision = 1
show_missing = true
skip_covered = true

# https://coverage.readthedocs.io/en/latest/config.html#run
[tool.coverage.run]
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

# https://coverage.readthedocs.io/en/latest/config.html#xml
[tool.coverage.xml]
output = "reports/coverage.xml"

# https://pycqa.github.io/isort/docs/configuration/options.html
[tool.isort]
color_output = true
line_length = 100
profile = "black"
src_paths = ["src", "tests"]

# https://mypy.readthedocs.io/en/latest/config_file.html
[tool.mypy]
junit_xml = "reports/mypy.xml"
{%- if cookiecutter.with_fastapi_api|int or cookiecutter.with_pydantic_typing|int or cookiecutter.with_typer_cli|int %}
plugins = "pydantic.mypy"
{%- endif %}
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true
{%- if cookiecutter.with_fastapi_api|int or cookiecutter.with_pydantic_typing|int or cookiecutter.with_typer_cli|int %}

# https://pydantic-docs.helpmanual.io/mypy_plugin/#configuring-the-plugin
[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true
{%- endif %}

# http://www.pydocstyle.org/en/latest/usage.html#configuration-files
[tool.pydocstyle]
convention = "{{ cookiecutter.docstring_style|lower }}"

# https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
[tool.pytest.ini_options]
addopts = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --typeguard-packages={{ cookiecutter.__package_name_snake_case }} --verbosity=2 --junitxml=reports/pytest.xml"
filterwarnings = ["error", "ignore::DeprecationWarning"]
testpaths = ["src", "tests"]
xfail_strict = true

# https://github.com/nat-n/poethepoet
[tool.poe.tasks]
{%- if cookiecutter.with_fastapi_api|int %}

  [tool.poe.tasks.dev]
  help = "Serve a REST API in development"
  cmd = """
    uvicorn
      --host 0.0.0.0
      --port $port
      --reload
      {{ cookiecutter.__package_name_snake_case }}.api:app
    """

    [[tool.poe.tasks.dev.args]]
    help = "Bind socket to this port (default: 8000)"
    name = "port"
    options = ["--port"]
    default = "8000"
{%- endif %}

  [tool.poe.tasks.docs]
  help = "Generate this package's docs"
  cmd = """
    pdoc
      --docformat $docformat
      --output-directory $outputdirectory
      {{ cookiecutter.__package_name_snake_case }}
    """

    [[tool.poe.tasks.docs.args]]
    help = "The docstring style (default: {{ cookiecutter.docstring_style|lower }})"
    name = "docformat"
    options = ["--docformat"]
    default = "{{ cookiecutter.docstring_style|lower }}"

    [[tool.poe.tasks.docs.args]]
    help = "The output directory (default: docs)"
    name = "outputdirectory"
    options = ["--output-directory"]
    default = "docs"
{%- if cookiecutter.with_jupyter_lab|int %}

  [tool.poe.tasks.lab]
  help = "Run Jupyter Lab"

    [[tool.poe.tasks.lab.sequence]]
    cmd = "mkdir -p notebooks"

    [[tool.poe.tasks.lab.sequence]]
    cmd = """
      jupyter lab
        --allow-root
        --notebook-dir notebooks
      """
{%- endif %}

  [tool.poe.tasks.lint]
  help = "Lint this package"

    [[tool.poe.tasks.lint.sequence]]
    cmd = """
      pre-commit run
        --all-files
        --color always
      """

    [[tool.poe.tasks.lint.sequence]]
    shell = "safety check --continue-on-error --full-report"
{%- if cookiecutter.with_fastapi_api|int %}

  [tool.poe.tasks.serve]
  help = "Serve a REST API in production"
  cmd = """
    gunicorn
      --access-logfile -
      --bind 0.0.0.0:$port
      --graceful-timeout 10
      --keep-alive 10
      --log-file -
      --timeout 30
      --worker-class uvicorn.workers.UvicornWorker
      --worker-tmp-dir /dev/shm
      --workers 2
      {{ cookiecutter.__package_name_snake_case }}.api:app
    """
  use_exec = true

    [[tool.poe.tasks.serve.args]]
    help = "Bind socket to this port (default: 8000)"
    name = "port"
    options = ["--port"]
    default = "8000"
{%- endif %}
{%- if cookiecutter.with_streamlit_app|int %}

  [tool.poe.tasks.streamlit]
  help = "Serve a Streamlit app"
  cmd = """
    streamlit run
      --browser.gatherUsageStats false
      --server.address 0.0.0.0
      --server.port $port
      --theme.base light
      streamlit_app.py
    """
  use_exec = true

    [[tool.poe.tasks.streamlit.args]]
    help = "Bind socket to this port (default: 8000)"
    name = "port"
    options = ["--port"]
    default = "8000"
{%- endif %}

  [tool.poe.tasks.test]
  help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage xml"
